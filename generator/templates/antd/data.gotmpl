{{ $title := .Info.Title }}

{{- define "docParam" }}{{/* renders a parameter with simple schema */}}
| {{ .Name }} | `{{ .Location }}` | {{ paramDocType . }} | `{{ .GoType }}` | {{ if .CollectionFormat }}`{{ docCollectionFormat .CollectionFormat .Child }}`{{ end }} | {{ if .Required }}✓{{ end }} | {{ if .Default }}`{{ json .Default }}`{{ end }} | {{ trimSpace .Description }} |
{{- end }}{{/*---- renders a parameter with simple schema ----*/}}

{{- define "docModelBodyParam" }}{{/* layout for body param schema */}}
| {{ .Name }} | `body` | {{ template "docSchemaSimple" .Schema }} | `{{ .Schema.GoType }}` | | {{ if .Required }}✓{{ end }} | {{ if .Default }}`{{ json .Default }}`{{ end }}| {{ trimSpace .Description }} |
{{- end }}{{/*---- layout for body param schema ----*/}}

{{/*---- docSchemaSimple ----*/}}
{{- define "docSchemaSimple" }}
  {{- if .IsAliased -}}
    [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
  {{- else if .IsArray }}
    {{- if .Items }}
      {{- if and .Items.IsPrimitive (not .Items.IsAliased) -}}
        {{- schemaDocType . -}}
      {{- else -}}
        [][{{- dropPackage .Items.GoType }}](#{{ dasherize (dropPackage .Items.GoType) -}})
      {{- end -}}
    {{- else -}}
      []any{{ printf " " -}}
    {{- end -}}
  {{- else if .IsMap -}}
    {{- if .ElemType }}
      {{- if and .ElemType.IsPrimitive (not .ElemType.IsAliased) (not .ElemType.IsInterface) -}}
        {{ schemaDocMapType . -}}
      {{- else if .ElemType.IsInterface -}}
        map of any{{ printf " " -}}
      {{- else -}}
        // Record<string, string>
        map of [{{- dropPackage .ElemType.GoType }}](#{{ dasherize (dropPackage .ElemType.GoType) -}})
      {{- end -}}
    {{- else -}}
      map of any{{ printf " " -}}
    {{- end -}}
  {{- else if .IsPrimitive -}}
    {{- schemaDocType . -}}
  {{- else -}}
    [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
  {{- end -}}
{{- end }}
{{/*---- docSchemaSimple ----*/}}

{{- define "docModel" }}{{/* renders a definition */}}
{{- with .Description }}
  > {{ .}}
{{- end }}
{{- if .ExternalDocs }}
  {{ template "externalDoc" . }}
{{- end }}
{{ if or .Description .ExternalDocs }}
  {{ printf "\n" }}
{{- end }}
{{ template "docModelSchema" .}}
{{- end }}{{/*---- renders a definition ----*/}}

{{- define "docModelSchema" }}{{/* renders a schema */}}
{{- if .IsArray }}
  {{- if .IsAliased }}
    [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
  {{- else if .Items }}
    {{- if and .Items.IsPrimitive (not .Items.IsAliased) -}}
      {{- schemaDocType . -}}
    {{- else -}}
      [][{{- dropPackage .Items.GoType }}](#{{ dasherize (dropPackage .Items.GoType) -}})
    {{- end -}}
  {{- else -}}
    []any{{ printf " " -}}
  {{- end -}}
{{- else if and .IsMap (not .IsAdditionalProperties) -}}
  {{- if .IsAliased -}}
    [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
  {{- else if .ElemType }}
    {{- if and .ElemType.IsPrimitive (not .ElemType.IsAliased) (not .ElemType.IsInterface) -}}
      {{ schemaDocMapType . -}}
    {{- else if .ElemType.IsInterface -}}
      map of any{{ printf " " -}}
    {{- else -}}
      map of [{{- dropPackage .ElemType.GoType }}](#{{ dasherize (dropPackage .ElemType.GoType) -}})
    {{- end -}}
  {{- else -}}
    map of any{{ printf " " -}}
  {{- end -}}
{{- else if and .IsAliased .IsPrimitive (not .IsSuperAlias) -}}
  | Name | Type | Go type | Default | Description | Example |
  |------|------|---------| ------- |-------------|---------|
  | {{ .Name }} | {{ schemaDocType . }}| {{ .AliasedType }} | {{ if .Default }}`{{ json .Default }}`{{ end }}| {{ trimSpace .Description }} | {{ if .Example }}`{{ .Example }}`{{ end }} |
  {{ printf "\n" }}
{{- else if or (and .IsAliased (not (.IsAdditionalProperties))) (and .IsComplexObject (not .Properties) (not .AllOf)) -}}
  [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
{{- else if and .IsInterface (not .IsAliased) (not .IsMap) -}}
  any
{{- else -}}
  {{- range .AllOf }}
    {{- if .IsAnonymous }}
      * inlined member (*{{ .Name }}*)

      {{ template "docModelSchema" . }}
    {{- else if or .IsComplexObject .IsPrimitive }}
      * composed type [{{- dropPackage .GoType }}](#{{ dasherize (dropPackage .GoType) -}})
    {{- else }}
      * {{ template "docModelSchema" . }}
    {{- end }}
  {{- end }}
  {{- if .Properties }}
{{/*    **{{ if .IsTuple }}Tuple members{{ else }}Properties{{ end }}***/}}
    **Properties**
    | Name | Type | Go type | Required | Default | Description | Example |
    |------|------|---------|:--------:| ------- |-------------|---------|
    {{- range .Properties }}
      | {{ camelize .Name }} | {{ template "docSchemaSimple" . }}| `{{ .GoType }}` | {{ if .Required }}✓{{ end }} | {{ if .Default }}`{{ json .Default }}`{{ end }}| {{ trimSpace .Description }} | {{ if .Example }}`{{ .Example }}`{{ end }} |
    {{- end }}
    {{ printf "\n" }}
  {{- end }}
  {{- if .HasAdditionalProperties }}

    **Additional Properties**
    {{- with .AdditionalProperties }}
      {{- if .IsInterface }}

        any
      {{- else if .IsPrimitive }}

        | Type | Go type | Default | Description | Example |
        |------|---------| ------- |-------------|---------|
        | {{ template "docSchemaSimple" . }} | `{{ .GoType }}` |{{ if .Default }}`{{ json .Default }}`{{ end }}| {{ trimSpace .Description }} | {{ if .Example }}`{{ .Example }}`{{ end }} |
      {{- else }}

        {{ template "docModelSchema" . }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if and .IsTuple .HasAdditionalItems }}
    {{- with .AdditionalItems }}

      **Additional Items**
      {{- if .IsInterface }}

        any
      {{- else if .IsPrimitive }}

        | Type | Go type | Default | Description | Example |
        |------|---------| ------- |-------------|---------|
        | {{ template "docSchemaSimple" . }} | `{{ .GoType }}` |{{ if .Default }}`{{ json .Default }}`{{ end }}| {{ trimSpace .Description }} | {{ if .Example }}`{{ .Example }}`{{ end }} |
      {{- else }}

        {{ template "docModelSchema" . }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end -}}
{{- end }}{{/*---- renders a schema ----*/}}

{{/*---- 遍历所有模型 ----*/}}
{{- range .Models }}
  {{- if .Enum }}
    export enum {{ replaceAll (humanizeTitle (trimPrefix .Name $title)) " " "" }} {
    {{- range .Enum }}
      {{ . }} = <any> '{{ . }}',
    {{- end }}
    }
  {{- else if .Properties }}
    export interface {{ replaceAll (humanizeTitle (trimPrefix .Name $title)) " " "" }} {
      {{- range .Properties }}
        {{ $goType := trimPrefix .GoType (Camelize $title) }}
        {{ camelize .Name }}{{ if not .Required }}?{{ end }}: {{ schemaTsType $goType (Camelize $title) }};
      {{- end }}
    }
  {{- end }}
{{- end }}
{{/*---- 遍历所有模型 ----*/}}
